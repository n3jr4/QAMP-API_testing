{
  "info": {
    "_postman_id": "ea3f249c-3b5e-4a8e-8404-554380fa015a",
    "name": "PlaceLab API smoke test",
    "description": "In this collection SMOKE test for PlaceLab via API is created.\n\nPlaceLab is an advanced analytics tool offering different modules. Using machine learning, PlaceLab automates the processes used to detect standard data issues, including data evaluation, verification, and enrichment.\n\nAccording to GIVEN-WHEN-THEN method, executed test can be described as following:\n\nGiven user authenticates itself by providing correct and valid email and password, which is confirmed by authentication token obtained upon successful authentication.\n\nWhen user provides simple_data_extraction file containing necessary websites for report creation, along with country_core parameter to specify which extraction model will be used then user can create report for the given data and once the report is confirmed to be ready for download, which is indicated with status \"FINISHED\", report can be downloaded and ready for further use.\n\nGenerated api_token, reportID, PlaceLabHost were stored and used as collection variable, while valid credentials were used and stored as environment variables",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27479978",
    "_collection_link": "https://crimson-star-683354.postman.co/workspace/1fde8c71-a39d-4f6c-9415-da832a962dca/collection/27479978-ea3f249c-3b5e-4a8e-8404-554380fa015a?action=share&creator=27479978&source=collection_link"
  },
  "item": [
    {
      "name": "Create authentication token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "var responseJson = JSON.parse(responseBody);\r",
              "\r",
              "pm.test(\"Response contains api_token\", function () {\r",
              "\r",
              "    pm.expect(responseJson).to.have.property(\"api_token\").and.to.not.be.empty;\r",
              "    \r",
              "    var api_token = responseJson.api_token;\r",
              "    pm.collectionVariables.set(\"api_token\", api_token);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{PlaceLabHost}}/api/v2/sessions?email={{email}}&password={{password}}",
          "host": [
            "{{PlaceLabHost}}"
          ],
          "path": [
            "api",
            "v2",
            "sessions"
          ],
          "query": [
            {
              "key": "email",
              "value": "{{email}}"
            },
            {
              "key": "password",
              "value": "{{password}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create report",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "var responseJson = JSON.parse(responseBody);\r",
              "\r",
              "pm.test(\"Response contains report ID\", function () {\r",
              "\r",
              "    pm.expect(responseJson).to.have.property(\"id\");\r",
              "\r",
              "    var reportID = responseJson.id;\r",
              "    pm.collectionVariables.set(\"\", reportID);\r",
              "});\r",
              "\r",
              "pm.test(\"Response contains state and it is equal to CREATED\", function () {\r",
              "\r",
              "    pm.expect(responseJson).to.have.property(\"state\").eql(\"CREATED\");\r",
              "\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "{{api_token}}",
            "type": "text"
          },
          {
            "warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "data_extraction_sample.txt"
            }
          ]
        },
        "url": {
          "raw": "{{PlaceLabHost}}/api/v2/reports/data_extraction?name=Nejra Data Extraction Report test&country_code=US",
          "host": [
            "{{PlaceLabHost}}"
          ],
          "path": [
            "api",
            "v2",
            "reports",
            "data_extraction"
          ],
          "query": [
            {
              "key": "name",
              "value": "Nejra Data Extraction Report test"
            },
            {
              "key": "country_code",
              "value": "US"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Check report status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "var responseJson = JSON.parse(responseBody);\r",
              "\r",
              "if(responseJson.state != \"FINISHED\"){\r",
              "   \r",
              "    console.log(\"Retry report!\");\r",
              "    retryRequest();\r",
              "    return;\r",
              "\r",
              "} else {\r",
              "\r",
              "    validateResponse();\r",
              "    return;\r",
              "}\r",
              "\r",
              "function retryRequest(){\r",
              "\r",
              "    if(responseJson.status != \"INVALID FILE\"){\r",
              "\r",
              "        postman.setNextRequest(pm.info.requestId);\r",
              "    }\r",
              "    else {\r",
              "\r",
              "        validateResponse();\r",
              "        return;\r",
              "    }\r",
              "}\r",
              "\r",
              "function validateResponse(){\r",
              "\r",
              "    pm.test(\"Validate response\", function () {\r",
              "\r",
              "    pm.expect(pm.response.code).to.be.eql(200);\r",
              "    pm.expect(responseJson.state).to.be.eql(\"FINISHED\");\r",
              "});\r",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "reportID",
            "value": "{{reportID}}",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "{{api_token}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{PlaceLabHost}}//api/v2/reports/{{reportID}}/status",
          "host": [
            "{{PlaceLabHost}}"
          ],
          "path": [
            "",
            "api",
            "v2",
            "reports",
            "{{reportID}}",
            "status"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Download report",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.collectionVariables.unset(\"reportID\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "{{api_token}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{PlaceLabHost}}/api/v2/reports/{{reportID}}/download",
          "host": [
            "{{PlaceLabHost}}"
          ],
          "path": [
            "api",
            "v2",
            "reports",
            "{{reportID}}",
            "download"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "PlaceLabHost",
      "value": "https://demo.placelab.com/"
    },
    {
      "key": "api_token",
      "value": ""
    },
    {
      "key": "reportID",
      "value": ""
    }
  ]
}